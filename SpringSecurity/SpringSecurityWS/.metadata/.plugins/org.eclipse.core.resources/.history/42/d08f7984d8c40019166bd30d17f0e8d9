package com.security.resttemplate.emp.controller;

import java.util.Arrays;
import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpEntity;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpMethod;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.security.crypto.codec.Base64;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.client.RestTemplate;

import com.security.resttemplate.emp.domain.Employee;

@RestController
public class DeptController {
	@Autowired
	RestTemplate restTemplate;
	
	private static final String urlPrefix="http://localhost:8080";
	
	//Using RestTemplate Exchange method 
	@GetMapping("/allEmployeesUsingExchange")
	public  List<Employee> getAllEmployees(){
	RestTemplate restTemplate = new RestTemplate();
	String url=urlPrefix+"/employees";
	HttpHeaders headers = new HttpHeaders();
	headers.setAccept(Arrays.asList(MediaType.APPLICATION_JSON));
	HttpEntity<String> entity = new HttpEntity<String>("parameters", this.getHeaders());
	
	ResponseEntity<Employee[]> response = restTemplate.exchange(url, HttpMethod.GET, entity, Employee[].class);
	System.out.println("allemployees using -->RestTemplate Exchange method-->"+Arrays.asList(response.getBody()));	
	return Arrays.asList(response.getBody());
	}
	
	//Using RestTemplate Exchange method 
		@GetMapping("/anEmployeesUsingExchange")
		public  List<Employee> getAnEmployee(){
		RestTemplate restTemplate = new RestTemplate();
		String url=urlPrefix+"/employee/101";
		HttpHeaders headers = new HttpHeaders();
		headers.setAccept(Arrays.asList(MediaType.APPLICATION_JSON));
		HttpEntity<String> entity = new HttpEntity<String>("parameters", this.getHeaders());
		
		ResponseEntity<Employee> response = restTemplate.exchange(url, HttpMethod.GET, entity, Employee.class);
		System.out.println("anemployee using -->RestTemplate Exchange method-->"+Arrays.asList(response.getBody()));	
		return Arrays.asList(response.getBody());
		}
	
	
	//Using RestTemplate postForEntity method //@RequestBody Employee employee
	@PostMapping("/saveEmployee")
	public Employee createEmployee(@RequestBody Employee employee) {
		String url = urlPrefix + "/createEmployee";
		HttpHeaders headers = new HttpHeaders();
        headers.setContentType(MediaType.APPLICATION_JSON_UTF8);
        HttpEntity<Employee> requestEntity = new HttpEntity<Employee>(employee, getHeaders());
        
		ResponseEntity<Employee> response  = restTemplate.postForEntity(url, requestEntity, Employee.class);		
		return response.getBody();
	}
	
	private static HttpHeaders getHeaders(){
		String plainCredentials="user:pwd";
		String base64Credentials = new String(Base64.encode(plainCredentials.getBytes()));
		HttpHeaders headers = new HttpHeaders();
		headers.add("Authorization", "Basic " + base64Credentials);
		headers.setAccept(Arrays.asList(MediaType.APPLICATION_JSON));
		return headers;
	}
	
	//Not Required
	//Using RestTemplate getForObject method to retrieve an employee
		@GetMapping("/anemployee/{deptId}")
		public Employee getEmployee(@PathVariable Long deptId) {
			String url=urlPrefix+"/employee/101";
	        Employee empResponse = restTemplate.getForObject(
	        		  url,
	        		  Employee.class);
	        		String employeeFirstName = empResponse.getFirstName();
	        System.out.println("employeeFirstName-->"+employeeFirstName);
			return empResponse;
		}
		
		//Using RestTemplate getForObject method to retrieve all employees
		@GetMapping("/allEmployeesUsingGetForObject/{deptId}")
		public List<Employee> fetchAllEmployees(@PathVariable Long deptId) {
			String url=urlPrefix+"/employees";
			Employee[] response = restTemplate.getForObject(
	        		  url,
	        		  Employee[].class);
	        		
	        System.out.println("all employees using -->RestTemplate-->getForObject-->"+Arrays.asList(response));
	        return Arrays.asList(response);
		}
		
		//Using RestTemplate getForEntity method 
		@GetMapping("/allEmployeesUsingGetForEntity")
		public List<Employee> readAllEmployees() {
			String url=urlPrefix+"/employees";
			ResponseEntity<Employee[]> response = restTemplate.getForEntity(url, Employee[].class);
			System.out.println("all employees using -->RestTemplate-->getForEntity-->RestTemplate-->"+Arrays.asList(response.getBody()));
			return Arrays.asList(response.getBody());
		}
	//End Not Required
	
	
}
